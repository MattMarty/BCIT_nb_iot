{"ast":null,"code":"import axios from 'axios'; //Set the logged in user data in local session \n\nconst setLoggeedInUser = user => {\n  localStorage.setItem('user', JSON.stringify(user));\n}; // Gets the logged in user data from local session \n\n\nconst getLoggedInUser = () => {\n  const user = localStorage.getItem('user');\n  if (user) return JSON.parse(user);\n  return null;\n}; //is user is logged in\n\n\nconst isUserAuthenticated = () => {\n  return getLoggedInUser() !== null;\n}; // Register Method\n\n\nconst postRegister = (url, data) => {\n  return axios.post(url, data).then(response => {\n    if (response.status >= 200 || response.status <= 299) return response.data;\n    throw response.data;\n  }).catch(err => {\n    var message;\n\n    if (err.response && err.response.status) {\n      switch (err.response.status) {\n        case 404:\n          message = \"Sorry! the page you are looking for could not be found\";\n          break;\n\n        case 500:\n          message = \"Sorry! something went wrong, please contact our support team\";\n          break;\n\n        case 401:\n          message = \"Invalid credentials\";\n          break;\n\n        default:\n          message = err[1];\n          break;\n      }\n    }\n\n    throw message;\n  });\n}; // Login Method\n\n\nconst postLogin = (url, data) => {\n  return axios.post(url, data).then(response => {\n    if (response.status === 400 || response.status === 500) throw response.data;\n    return response.data;\n  }).catch(err => {\n    throw err[1];\n  });\n}; // postForgetPwd \n\n\nconst postForgetPwd = (url, data) => {\n  return axios.post(url, data).then(response => {\n    if (response.status === 400 || response.status === 500) throw response.data;\n    return response.data;\n  }).catch(err => {\n    throw err[1];\n  });\n};\n\nexport { setLoggeedInUser, getLoggedInUser, isUserAuthenticated, postRegister, postLogin, postForgetPwd };","map":{"version":3,"sources":["/Users/codychand/Documents/GitHub/ISSP/BCIT_nb_iot/BCIT_nb_iot_forked/vertical/src/helpers/authUtils.js"],"names":["axios","setLoggeedInUser","user","localStorage","setItem","JSON","stringify","getLoggedInUser","getItem","parse","isUserAuthenticated","postRegister","url","data","post","then","response","status","catch","err","message","postLogin","postForgetPwd"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,MAAMC,gBAAgB,GAAIC,IAAD,IAAU;AAC/BC,EAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAA7B;AACH,CAFD,C,CAIA;;;AACA,MAAMK,eAAe,GAAG,MAAM;AAC1B,QAAML,IAAI,GAAGC,YAAY,CAACK,OAAb,CAAqB,MAArB,CAAb;AACA,MAAIN,IAAJ,EACI,OAAOG,IAAI,CAACI,KAAL,CAAWP,IAAX,CAAP;AACJ,SAAO,IAAP;AACH,CALD,C,CAOA;;;AACA,MAAMQ,mBAAmB,GAAG,MAAM;AAC9B,SAAOH,eAAe,OAAO,IAA7B;AACH,CAFD,C,CAIA;;;AACA,MAAMI,YAAY,GAAG,CAACC,GAAD,EAAMC,IAAN,KAAe;AAChC,SAAOb,KAAK,CAACc,IAAN,CAAWF,GAAX,EAAgBC,IAAhB,EAAsBE,IAAtB,CAA2BC,QAAQ,IAAI;AAC1C,QAAIA,QAAQ,CAACC,MAAT,IAAmB,GAAnB,IAA0BD,QAAQ,CAACC,MAAT,IAAmB,GAAjD,EACI,OAAOD,QAAQ,CAACH,IAAhB;AACJ,UAAMG,QAAQ,CAACH,IAAf;AACH,GAJM,EAIJK,KAJI,CAIEC,GAAG,IAAI;AACZ,QAAIC,OAAJ;;AACA,QAAID,GAAG,CAACH,QAAJ,IAAgBG,GAAG,CAACH,QAAJ,CAAaC,MAAjC,EAA0C;AACtC,cAAQE,GAAG,CAACH,QAAJ,CAAaC,MAArB;AACI,aAAK,GAAL;AAAUG,UAAAA,OAAO,GAAG,wDAAV;AAAoE;;AAC9E,aAAK,GAAL;AAAUA,UAAAA,OAAO,GAAG,8DAAV;AAA0E;;AACpF,aAAK,GAAL;AAAUA,UAAAA,OAAO,GAAG,qBAAV;AAAiC;;AAC3C;AAASA,UAAAA,OAAO,GAAGD,GAAG,CAAC,CAAD,CAAb;AAAkB;AAJ/B;AAMH;;AACD,UAAMC,OAAN;AACH,GAfM,CAAP;AAiBH,CAlBD,C,CAoBA;;;AACA,MAAMC,SAAS,GAAG,CAACT,GAAD,EAAMC,IAAN,KAAe;AAC7B,SAAOb,KAAK,CAACc,IAAN,CAAWF,GAAX,EAAgBC,IAAhB,EAAsBE,IAAtB,CAA2BC,QAAQ,IAAI;AAC1C,QAAIA,QAAQ,CAACC,MAAT,KAAoB,GAApB,IAA2BD,QAAQ,CAACC,MAAT,KAAoB,GAAnD,EACI,MAAMD,QAAQ,CAACH,IAAf;AACJ,WAAOG,QAAQ,CAACH,IAAhB;AACH,GAJM,EAIJK,KAJI,CAIEC,GAAG,IAAI;AACZ,UAAMA,GAAG,CAAC,CAAD,CAAT;AACH,GANM,CAAP;AAOH,CARD,C,CAUA;;;AACA,MAAMG,aAAa,GAAG,CAACV,GAAD,EAAMC,IAAN,KAAe;AACjC,SAAOb,KAAK,CAACc,IAAN,CAAWF,GAAX,EAAgBC,IAAhB,EAAsBE,IAAtB,CAA2BC,QAAQ,IAAI;AAC1C,QAAIA,QAAQ,CAACC,MAAT,KAAoB,GAApB,IAA2BD,QAAQ,CAACC,MAAT,KAAoB,GAAnD,EACI,MAAMD,QAAQ,CAACH,IAAf;AACJ,WAAOG,QAAQ,CAACH,IAAhB;AACH,GAJM,EAIJK,KAJI,CAIEC,GAAG,IAAI;AACZ,UAAMA,GAAG,CAAC,CAAD,CAAT;AACH,GANM,CAAP;AAOH,CARD;;AAWA,SAASlB,gBAAT,EAA2BM,eAA3B,EAA4CG,mBAA5C,EAAiEC,YAAjE,EAA+EU,SAA/E,EAA0FC,aAA1F","sourcesContent":["import axios from 'axios';\n\n//Set the logged in user data in local session \nconst setLoggeedInUser = (user) => {\n    localStorage.setItem('user', JSON.stringify(user));\n}\n\n// Gets the logged in user data from local session \nconst getLoggedInUser = () => {\n    const user = localStorage.getItem('user');\n    if (user)\n        return JSON.parse(user);\n    return null;\n}\n\n//is user is logged in\nconst isUserAuthenticated = () => {\n    return getLoggedInUser() !== null;\n}\n\n// Register Method\nconst postRegister = (url, data) => {\n    return axios.post(url, data).then(response => {\n        if (response.status >= 200 || response.status <= 299)\n            return response.data;\n        throw response.data;\n    }).catch(err => {\n        var message;\n        if (err.response && err.response.status ) {\n            switch (err.response.status) {\n                case 404: message = \"Sorry! the page you are looking for could not be found\"; break;\n                case 500: message = \"Sorry! something went wrong, please contact our support team\"; break;\n                case 401: message = \"Invalid credentials\"; break;\n                default: message = err[1]; break;\n            }\n        }\n        throw message;\n    });\n\n}\n\n// Login Method\nconst postLogin = (url, data) => {\n    return axios.post(url, data).then(response => {\n        if (response.status === 400 || response.status === 500)\n            throw response.data;\n        return response.data;\n    }).catch(err => {\n        throw err[1];\n    });\n}\n\n// postForgetPwd \nconst postForgetPwd = (url, data) => {\n    return axios.post(url, data).then(response => {\n        if (response.status === 400 || response.status === 500)\n            throw response.data;\n        return response.data;\n    }).catch(err => {\n        throw err[1];\n    });\n}\n\n\nexport { setLoggeedInUser, getLoggedInUser, isUserAuthenticated, postRegister, postLogin, postForgetPwd }"]},"metadata":{},"sourceType":"module"}