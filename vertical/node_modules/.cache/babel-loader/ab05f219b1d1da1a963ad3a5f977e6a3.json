{"ast":null,"code":"import { takeEvery, fork, put, all, call } from 'redux-saga/effects'; //Account Redux states\n\nimport { REGISTER_USER } from './actionTypes';\nimport { registerUserSuccessful, apiError } from './actions'; //AUTH related methods\n\nimport { postRegister } from '../../../helpers/authUtils'; // Is user register successfull then direct plot user in redux.\n\nfunction* registerUser({\n  payload: {\n    user\n  }\n}) {\n  try {\n    const response = yield call(postRegister, '/post-register', user);\n    yield put(registerUserSuccessful(response));\n  } catch (error) {\n    yield put(apiError(error));\n  }\n}\n\nexport function* watchUserRegister() {\n  yield takeEvery(REGISTER_USER, registerUser);\n}\n\nfunction* accountSaga() {\n  yield all([fork(watchUserRegister)]);\n}\n\nexport default accountSaga;","map":{"version":3,"sources":["/Users/codychand/Documents/GitHub/ISSP/BCIT_nb_iot/BCIT_nb_iot_forked/vertical/src/store/auth/register/saga.js"],"names":["takeEvery","fork","put","all","call","REGISTER_USER","registerUserSuccessful","apiError","postRegister","registerUser","payload","user","response","error","watchUserRegister","accountSaga"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,GAA/B,EAAoCC,IAApC,QAAgD,oBAAhD,C,CAEA;;AACA,SAASC,aAAT,QAA8B,eAA9B;AACA,SAASC,sBAAT,EAAiCC,QAAjC,QAAiD,WAAjD,C,CAEA;;AACA,SAASC,YAAT,QAA6B,4BAA7B,C,CAEA;;AACA,UAAUC,YAAV,CAAuB;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA;AAAF;AAAX,CAAvB,EAA8C;AAC1C,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMR,IAAI,CAACI,YAAD,EAAe,gBAAf,EAAiCG,IAAjC,CAA3B;AACA,UAAMT,GAAG,CAACI,sBAAsB,CAACM,QAAD,CAAvB,CAAT;AACH,GAHD,CAGE,OAAOC,KAAP,EAAc;AACZ,UAAMX,GAAG,CAACK,QAAQ,CAACM,KAAD,CAAT,CAAT;AACH;AACJ;;AAED,OAAO,UAAUC,iBAAV,GAA8B;AACjC,QAAMd,SAAS,CAACK,aAAD,EAAgBI,YAAhB,CAAf;AACH;;AAED,UAAUM,WAAV,GAAwB;AACpB,QAAMZ,GAAG,CAAC,CAACF,IAAI,CAACa,iBAAD,CAAL,CAAD,CAAT;AACH;;AAED,eAAeC,WAAf","sourcesContent":["import { takeEvery, fork, put, all, call } from 'redux-saga/effects';\n\n//Account Redux states\nimport { REGISTER_USER } from './actionTypes';\nimport { registerUserSuccessful, apiError } from './actions';\n\n//AUTH related methods\nimport { postRegister } from '../../../helpers/authUtils';\n\n// Is user register successfull then direct plot user in redux.\nfunction* registerUser({ payload: { user } }) {\n    try {\n        const response = yield call(postRegister, '/post-register', user);\n        yield put(registerUserSuccessful(response));\n    } catch (error) {\n        yield put(apiError(error));\n    }\n}\n\nexport function* watchUserRegister() {\n    yield takeEvery(REGISTER_USER, registerUser)\n}\n\nfunction* accountSaga() {\n    yield all([fork(watchUserRegister)]);\n}\n\nexport default accountSaga;"]},"metadata":{},"sourceType":"module"}