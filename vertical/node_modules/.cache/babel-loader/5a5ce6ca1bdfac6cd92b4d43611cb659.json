{"ast":null,"code":"var _jsxFileName = \"/Users/codychand/Documents/GitHub/ISSP/BCIT_nb_iot/BCIT_nb_iot_forked/vertical/src/containers/charts/chartjs/DonutChart.js\";\nimport React, { Component } from 'react';\nimport { Doughnut } from 'react-chartjs-2';\n\nclass DonutChart extends Component {\n  render() {\n    const data = {\n      labels: [\"Direct\", \"Affilliate\"],\n      datasets: [{\n        data: [128, 48],\n        backgroundColor: [\"#4090cb\", \"#f2f2f2\"],\n        hoverBackgroundColor: [\"#4090cb\", \"#f2f2f2\"]\n      }]\n    };\n    const option = {\n      tooltips: {\n        callbacks: {\n          label: function (tooltipItem, data) {\n            var dataset = data.datasets[tooltipItem.datasetIndex];\n\n            var meta = dataset._meta[Object.keys(dataset._meta)[0]];\n\n            var total = meta.total;\n            var currentValue = dataset.data[tooltipItem.index];\n            var percentage = parseFloat((currentValue / total * 100).toFixed(1));\n            return currentValue + ' (' + percentage + '%)';\n          },\n          title: function (tooltipItem, data) {\n            return data.labels[tooltipItem[0].index];\n          }\n        }\n      }\n    };\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(Doughnut, {\n      data: data,\n      options: option,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default DonutChart;","map":{"version":3,"sources":["/Users/codychand/Documents/GitHub/ISSP/BCIT_nb_iot/BCIT_nb_iot_forked/vertical/src/containers/charts/chartjs/DonutChart.js"],"names":["React","Component","Doughnut","DonutChart","render","data","labels","datasets","backgroundColor","hoverBackgroundColor","option","tooltips","callbacks","label","tooltipItem","dataset","datasetIndex","meta","_meta","Object","keys","total","currentValue","index","percentage","parseFloat","toFixed","title"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,QAAR,QAAuB,iBAAvB;;AAEA,MAAMC,UAAN,SAAyBF,SAAzB,CAAkC;AAElCG,EAAAA,MAAM,GAAE;AACJ,UAAMC,IAAI,GAAG;AACTC,MAAAA,MAAM,EAAE,CAAC,QAAD,EAAW,YAAX,CADC;AAETC,MAAAA,QAAQ,EAAE,CAAC;AACTF,QAAAA,IAAI,EAAE,CAAC,GAAD,EAAM,EAAN,CADG;AAETG,QAAAA,eAAe,EAAG,CAAC,SAAD,EAAY,SAAZ,CAFT;AAGTC,QAAAA,oBAAoB,EAAE,CAAC,SAAD,EAAY,SAAZ;AAHb,OAAD;AAFD,KAAb;AASE,UAAMC,MAAM,GAAG;AACbC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,SAAS,EAAE;AACTC,UAAAA,KAAK,EAAE,UAASC,WAAT,EAAsBT,IAAtB,EAA4B;AACjC,gBAAIU,OAAO,GAAGV,IAAI,CAACE,QAAL,CAAcO,WAAW,CAACE,YAA1B,CAAd;;AACA,gBAAIC,IAAI,GAAGF,OAAO,CAACG,KAAR,CAAcC,MAAM,CAACC,IAAP,CAAYL,OAAO,CAACG,KAApB,EAA2B,CAA3B,CAAd,CAAX;;AACA,gBAAIG,KAAK,GAAGJ,IAAI,CAACI,KAAjB;AACA,gBAAIC,YAAY,GAAGP,OAAO,CAACV,IAAR,CAAaS,WAAW,CAACS,KAAzB,CAAnB;AACA,gBAAIC,UAAU,GAAGC,UAAU,CAAC,CAACH,YAAY,GAACD,KAAb,GAAmB,GAApB,EAAyBK,OAAzB,CAAiC,CAAjC,CAAD,CAA3B;AACA,mBAAOJ,YAAY,GAAG,IAAf,GAAsBE,UAAtB,GAAmC,IAA1C;AACD,WARQ;AASTG,UAAAA,KAAK,EAAE,UAASb,WAAT,EAAsBT,IAAtB,EAA4B;AACjC,mBAAOA,IAAI,CAACC,MAAL,CAAYQ,WAAW,CAAC,CAAD,CAAX,CAAeS,KAA3B,CAAP;AACD;AAXQ;AADH;AADG,KAAf;AAkBF,WACQ,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,QAAD;AAAU,MAAA,IAAI,EAAElB,IAAhB;AAAsB,MAAA,OAAO,EAAEK,MAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADR;AAKC;;AAnC6B;;AAsClC,eAAeP,UAAf","sourcesContent":["import React , {Component } from 'react';\nimport {Doughnut} from 'react-chartjs-2';\n\nclass DonutChart extends Component{\n\nrender(){\n    const data = {\n        labels: [\"Direct\", \"Affilliate\"],\n        datasets: [{\n          data: [128, 48],\n          backgroundColor:  [\"#4090cb\", \"#f2f2f2\" ],\n          hoverBackgroundColor: [\"#4090cb\", \"#f2f2f2\"]\n        }]\n      };\n      \n      const option = {\n        tooltips: {\n          callbacks: {\n            label: function(tooltipItem, data) {\n              var dataset = data.datasets[tooltipItem.datasetIndex];\n              var meta = dataset._meta[Object.keys(dataset._meta)[0]];\n              var total = meta.total;\n              var currentValue = dataset.data[tooltipItem.index];\n              var percentage = parseFloat((currentValue/total*100).toFixed(1));\n              return currentValue + ' (' + percentage + '%)';\n            },\n            title: function(tooltipItem, data) {\n              return data.labels[tooltipItem[0].index];\n            }\n          }\n        }\n      }\n\n    return(\n            <React.Fragment>\n                <Doughnut data={data} options={option} />\n            </React.Fragment>\n        );\n    }\n}\n\nexport default DonutChart;   "]},"metadata":{},"sourceType":"module"}